//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RegistroCrud
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DB_RegistroCrudEntities : DbContext
    {
        public DB_RegistroCrudEntities()
            : base("name=DB_RegistroCrudEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<test_habilidades> test_habilidades { get; set; }
        public virtual DbSet<test_habilidades_usuario> test_habilidades_usuario { get; set; }
        public virtual DbSet<test_usuario> test_usuario { get; set; }
    
        public virtual int test_actualizar(string tipo, string nombreCompleto, string correo, string tipoIdent, string ced, string usuario, string clave)
        {
            var tipoParameter = tipo != null ?
                new ObjectParameter("tipo", tipo) :
                new ObjectParameter("tipo", typeof(string));
    
            var nombreCompletoParameter = nombreCompleto != null ?
                new ObjectParameter("nombreCompleto", nombreCompleto) :
                new ObjectParameter("nombreCompleto", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("correo", correo) :
                new ObjectParameter("correo", typeof(string));
    
            var tipoIdentParameter = tipoIdent != null ?
                new ObjectParameter("tipoIdent", tipoIdent) :
                new ObjectParameter("tipoIdent", typeof(string));
    
            var cedParameter = ced != null ?
                new ObjectParameter("ced", ced) :
                new ObjectParameter("ced", typeof(string));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("usuario", usuario) :
                new ObjectParameter("usuario", typeof(string));
    
            var claveParameter = clave != null ?
                new ObjectParameter("clave", clave) :
                new ObjectParameter("clave", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("test_actualizar", tipoParameter, nombreCompletoParameter, correoParameter, tipoIdentParameter, cedParameter, usuarioParameter, claveParameter);
        }
    
        public virtual ObjectResult<string> test_eliminar(string ced)
        {
            var cedParameter = ced != null ?
                new ObjectParameter("ced", ced) :
                new ObjectParameter("ced", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("test_eliminar", cedParameter);
        }
    
        public virtual int test_insertar(string tipoUsuario, string nombreCompleto, string correo, string tipoIdent, string ced, string usuario, string clave)
        {
            var tipoUsuarioParameter = tipoUsuario != null ?
                new ObjectParameter("tipoUsuario", tipoUsuario) :
                new ObjectParameter("tipoUsuario", typeof(string));
    
            var nombreCompletoParameter = nombreCompleto != null ?
                new ObjectParameter("nombreCompleto", nombreCompleto) :
                new ObjectParameter("nombreCompleto", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("correo", correo) :
                new ObjectParameter("correo", typeof(string));
    
            var tipoIdentParameter = tipoIdent != null ?
                new ObjectParameter("tipoIdent", tipoIdent) :
                new ObjectParameter("tipoIdent", typeof(string));
    
            var cedParameter = ced != null ?
                new ObjectParameter("ced", ced) :
                new ObjectParameter("ced", typeof(string));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("usuario", usuario) :
                new ObjectParameter("usuario", typeof(string));
    
            var claveParameter = clave != null ?
                new ObjectParameter("clave", clave) :
                new ObjectParameter("clave", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("test_insertar", tipoUsuarioParameter, nombreCompletoParameter, correoParameter, tipoIdentParameter, cedParameter, usuarioParameter, claveParameter);
        }
    
        public virtual int test_insertarHabilidad(string hab, string ced)
        {
            var habParameter = hab != null ?
                new ObjectParameter("hab", hab) :
                new ObjectParameter("hab", typeof(string));
    
            var cedParameter = ced != null ?
                new ObjectParameter("ced", ced) :
                new ObjectParameter("ced", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("test_insertarHabilidad", habParameter, cedParameter);
        }
    
        public virtual ObjectResult<test_login_Result> test_login(string usuario, string clave)
        {
            var usuarioParameter = usuario != null ?
                new ObjectParameter("usuario", usuario) :
                new ObjectParameter("usuario", typeof(string));
    
            var claveParameter = clave != null ?
                new ObjectParameter("clave", clave) :
                new ObjectParameter("clave", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<test_login_Result>("test_login", usuarioParameter, claveParameter);
        }
    
        public virtual ObjectResult<test_mostrar_Result> test_mostrar()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<test_mostrar_Result>("test_mostrar");
        }
    
        public virtual ObjectResult<string> test_mostrarHabilidades()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("test_mostrarHabilidades");
        }
    }
}
